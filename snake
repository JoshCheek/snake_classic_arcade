#!/usr/bin/env ruby

# ANSI stuffs!
BLACK   = "\e[40m"
RED     = "\e[41m"
GREEN   = "\e[42m"
YELLOW  = "\e[43m"
BLUE    = "\e[44m"
MAGENTA = "\e[45m"
TEAL    = "\e[46m"
WHITE   = "\e[47m"

HIDE_CURSOR = "\e[?25l"
SHOW_CURSOR = "\e[?25h"

def to(y, x)
  "\e[#{y};#{x*2-1}H"
end

# position / directions
Position = Struct.new :y, :x do
  alias to_hash to_h

  def -@
    pos -y, -x
  end

  def +(y:, x:)
    pos y+y(), x+x()
  end
end

def pos(y, x)
  Position.new y, x
end

UP    = pos -1,  0 # origin on the terminal is at the top-right, so -y to go down
DOWN  = pos  1,  0
LEFT  = pos  0, -1
RIGHT = pos  0,  1


# Things to put on the game board!
Item = Struct.new :type, :duration, :obstructs, :str do
  alias obstructs? obstructs
  alias to_s       str

  def initialize(type:, duration: Float::INFINITY, obstructs: false, str:)
    super type, duration, obstructs, str
  end

  def expired?
    duration <= 0
  end

  def tick_tock
    new duration: duration-1
  end

  private def new(**overrides)
    self.class.new **to_h, **overrides
  end
end


class Snake < Item
  attr_reader :position, :direction, :next_direction, :expired
  alias length duration

  def initialize(position:, direction:, next_direction:nil, expired:false, length:nil, **rest)
    @position, @direction, @next_direction,            @expired =
     position,  direction,  next_direction||direction,  expired
    rest[:duration] = length || rest[:duration]
    super type: :snake, obstructs: true, **rest
  end

  def to_a
    position.to_a
  end

  def to_h
    super.merge position:       position,
                direction:      direction,
                next_direction: next_direction,
                expired:        expired
  end

  def slither
    new position: position+next_direction, direction: next_direction
  end

  def face(direction)
    return self if direction() == -direction
    new next_direction: direction
  end

  def grow(n)
    new length: length+n
  end

  def die
    new expired: true
  end

  def expired?
    expired || super
  end
end


# ANSI terminal setup
require 'io/console'
rows, cols = $stdin.winsize
cols /= 2 # each location will take 2 cols
$stdin.raw!;       at_exit { $stdin.cooked! }
print HIDE_CURSOR; at_exit { print SHOW_CURSOR }


# mah board items
WALL  = Item.new type: :wall,  obstructs: true,  str: "#{BLUE}  "
FLOOR = Item.new type: :floor, obstructs: false, str: "#{BLACK}  "
FOOD  = Item.new type: :food,  obstructs: false, str: "#{MAGENTA}  "
snake = Snake.new position:  pos(rows.succ/2, cols.succ/2),
                  direction: LEFT,
                  length:    4,
                  str:       "#{WHITE}  "
# mah board!
board = Hash.new FLOOR
board[snake.position] = snake
rows.times { |y| board[pos y+1, 1] = board[pos y+1, cols] = WALL }
cols.times { |x| board[pos 1, x+1] = board[pos rows, x+1] = WALL }

# gotsta get fed
define_method :find_a_place_to_stash_some_food! do
  loop do
    p = pos rand(rows).succ, rand(cols).succ
    break p if board[p] == FLOOR
  end
end
board[find_a_place_to_stash_some_food!] = FOOD

# print the initial board
1.upto rows do |y|
  1.upto cols do |x|
    print "#{to y, x}#{board[pos y, x]}"
  end
end

# game can end without the snake dying
quit = false
input_handler = updater = nil

# read them inputs
input_handler = Thread.new do
  Thread.abort_on_exception = true
  until snake.expired? || quit
    IO.select [$stdin]
    valid_inputs = $stdin.readpartial(4096).scan(/\e\[[ABCD]|[hjklq#{?\C-c}#{?\C-d}]/)
    case valid_inputs.last
    when ?\C-c, ?\C-d, ?q then quit  = true
    when ?h, "\e[D"       then snake = snake.face LEFT
    when ?l, "\e[C"       then snake = snake.face RIGHT
    when ?k, "\e[A"       then snake = snake.face UP
    when ?j, "\e[B"       then snake = snake.face DOWN
    else                       # noop
    end
  end
  updater.kill
end


updater = Thread.new do
  Thread.abort_on_exception = true
  until snake.expired? || quit
    sleep 0.08

    expireds, items = board.map { |pos, item| [pos, item.tick_tock] }
                           .partition { |_, i| i.expired? }
    board = items.to_h.tap { |h| h.default = board.default }

    expireds.each { |position, _| print "#{to *position}#{FLOOR}" }

    snake   = snake.slither
    current = board[snake.position]
    if current.obstructs?
      snake = snake.die
    elsif current == FOOD
      snake      = snake.grow 7
      pos        = find_a_place_to_stash_some_food!
      board[pos] = FOOD
      print "#{to *pos}#{board[pos]}"
    end
    board[snake.position] = snake
    print "#{to *snake}#{snake}" unless snake.expired?
  end
  input_handler.kill
end

input_handler.join
updater.join

puts to(rows, 1)
